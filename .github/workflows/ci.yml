name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - Feat/#10
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Check directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -R

      - name: Install dependencies
        run: |
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          else
            echo "requirements.txt not found"
            exit 1
          fi

      # - name: Run tests
      #   run: |
      #     pytest ./tests/test.py || exit 1

      - name: Build Docker image
        run: |
          docker build -t my-app-image ./backend

      - name: Run Docker container and test
        run: |
          docker run --name my-app-container -d my-app-image
          # docker exec my-app-container pytest ./tests/test.py || exit 1
          docker stop my-app-container
          docker rm my-app-container

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Test SSH connection
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo SSH connection successful"

      - name: Deploy to EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if [ ! -d "/home/${{ secrets.EC2_USER }}/docker" ]; then
              git clone --recursive https://github.com/2024-Summer-Bootcamp-team-C/Docker
            fi
            cd Docker
            git pull origin main
            docker-compose down
            docker-compose up --build -d
          EOF

# pem 첫줄 마지막줄 넣고 테스트
